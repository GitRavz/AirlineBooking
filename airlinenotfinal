import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import java.util.ArrayList;
import java.sql.*;
import java.awt.Font;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class projectgroup4 {

    private JFrame homeFrame;
    private boolean isLoggedIn = false; //track login status
    private JButton profile;
    private JButton logout;
    private String loggedInUserEmail;
    private Connection connection;
    private JButton registerButton;


public static void main(String[] args) {
    SwingUtilities.invokeLater(() -> new projectgroup4().showHomePage());
}

private boolean makePayment(int bookingId, Connection connection) {
    try {
        if (connection != null && !connection.isClosed()) {
            String updateQuery = "UPDATE bookings SET is_paid = true WHERE booking_id = ?";
            try (PreparedStatement updateStatement = connection.prepareStatement(updateQuery)) {
                updateStatement.setInt(1, bookingId);
                int rowsUpdated = updateStatement.executeUpdate();
                return rowsUpdated > 0;
            }
        } else {
            System.err.println("Error: Connection is null or closed in makePayment method");
            return false;
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        return false;
    }
}

	//BOOKINGS
private void showUserBookings(String userEmail) {
	JFrame bookframe = new JFrame("User Bookings");
    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String password = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String selectQuery = "SELECT * FROM bookings WHERE user_email = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                preparedStatement.setString(1, userEmail);


                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    // Create a new JFrame to display user bookings

                    bookframe.setSize(600, 400);
                    bookframe.getContentPane().setBackground(new Color(140, 216, 255));
                    bookframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    bookframe.setLayout(null); // Set layout to null for manual positioning

                    // Create a JLabel to display the title
                    JLabel titleLabel = new JLabel("Your Bookings:");
                    titleLabel.setForeground(new Color(1, 11, 19));
                    Font titleFont = new Font("Castellar", Font.BOLD, 16);
                    titleLabel.setFont(titleFont);
                    titleLabel.setBounds(200, 40, 200, 85);
                    bookframe.add(titleLabel);

                    boolean hasBookedFlights = false;
                    final ResultSet finalResultSet = resultSet;


                    while (resultSet.next()) {
                        int bookingId = resultSet.getInt("booking_id");
                        String flightId = resultSet.getString("flight_id");
                        String departure = resultSet.getString("departure_location");
                        String destination = resultSet.getString("destination_location");
                        String date = resultSet.getString("flight_date");
                        String cost = resultSet.getString("cost");

                        // Display booking information in labels
                        JLabel labelBookingId = new JLabel("Booking ID: " + bookingId);
                        JLabel labelFlightId = new JLabel("Flight ID: " + flightId);
                        JLabel labelDeparture = new JLabel("Departure: " + departure);
                        JLabel labelDestination = new JLabel("Destination: " + destination);
                        JLabel labelDate = new JLabel("Date: " + date);
                        JLabel labelCost = new JLabel("Cost: " + cost);

                        labelBookingId.setForeground(new Color(15, 135, 195));
                        labelFlightId.setForeground(new Color(15, 135, 195));
                        labelDeparture.setForeground(new Color(15, 135, 195));
                        labelDestination.setForeground(new Color(15, 135, 195));
                        labelDate.setForeground(new Color(15, 135, 195));
                        labelCost.setForeground(new Color(15, 135, 195));

                        // Set font for labels
                        Font labelFont = new Font("Berlin Sans FB Demi", Font.PLAIN, 16);
                        labelBookingId.setFont(labelFont);
                        labelFlightId.setFont(labelFont);
                        labelDeparture.setFont(labelFont);
                        labelDestination.setFont(labelFont);
                        labelDate.setFont(labelFont);
                        labelCost.setFont(labelFont);

                        // Set bounds for labels
                        labelBookingId.setBounds(100, 120, 200, 25);
                        labelFlightId.setBounds(350, 120, 200, 25);
                        labelDeparture.setBounds(100, 170, 200, 25);
                        labelDestination.setBounds(350, 170, 200, 25);
                        labelDate.setBounds(100, 220, 200, 25);
                        labelCost.setBounds(350, 220, 200, 25);

                        // Add labels to the frame
                        bookframe.add(labelBookingId);
                        bookframe.add(labelFlightId);
                        bookframe.add(labelDeparture);
                        bookframe.add(labelDestination);
                        bookframe.add(labelDate);
                        bookframe.add(labelCost);

                        boolean isPaid = resultSet.getBoolean("is_paid");

                        // Add label for payment status
                        JLabel labelPaymentStatus = new JLabel("Paid: " + (isPaid ? "Yes" : "No"));
						labelPaymentStatus.setForeground(new Color(15, 135, 195));
						Font paymentStatusFont = new Font("Berlin Sans FB Demi", Font.PLAIN, 16);
						labelPaymentStatus.setFont(paymentStatusFont);
						labelPaymentStatus.setBounds(100, 270, 200, 25);
						bookframe.add(labelPaymentStatus);

                        hasBookedFlights = true;
                    }

                            // Add the Pay button
       if (hasBookedFlights) {
    JButton payButton = new JButton("Pay");
    payButton.setBounds(150, 320, 150, 30);
    payButton.setBackground(new Color(50, 205, 50)); // Green color
    payButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int selectedBookingId = Integer.parseInt(JOptionPane.showInputDialog(bookframe, "Enter Booking ID to make payment:"));

                // Ensure to pass the correct parameters to makePayment method
                if (makePayment(selectedBookingId, connection)) {
                    JOptionPane.showMessageDialog(bookframe, "Payment successful. Thank you!");
                    // You might want to update payment status labels or take other actions here
                } else {
                    JOptionPane.showMessageDialog(bookframe, "Please input the correct Book ID and try again.");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(bookframe, "Error processing payment. Please try again later.");
            }
        }
    });

            payButton.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    payButton.setBackground(new Color(0, 128, 0)); // Dark green hover color
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    payButton.setBackground(new Color(50, 205, 50));
                }
            });

            // Add Pay button to the frame
            bookframe.add(payButton);
        } else {
            // If no booked flights, display a message using JOptionPane
            JOptionPane.showMessageDialog(bookframe, "No booked flights found.", "No Bookings", JOptionPane.INFORMATION_MESSAGE);
            bookframe.dispose();
        }

		// Add the Cancel button
			if (hasBookedFlights) {
    JButton cancelButton = new JButton("Cancel Booking");
    cancelButton.setBounds(310, 320, 150, 30);
    cancelButton.setBackground(new Color(115, 147, 179));
    cancelButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                int selectedBookingId = Integer.parseInt(JOptionPane.showInputDialog(bookframe, "Enter Booking ID to cancel:"));

                // Implement the cancel booking logic (you may want to verify the booking ID)
                if (cancelBooking(selectedBookingId)) {
                    JOptionPane.showMessageDialog(bookframe, "Booking canceled successfully.");
                    bookframe.dispose();
                } else {
                    JOptionPane.showMessageDialog(bookframe, "Please input the correct Book ID and try again.");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                // Handle the exception or display an error message as needed
                JOptionPane.showMessageDialog(bookframe, "Error processing cancellation. Please try again later.");
            }
        }
    });

    cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            cancelButton.setBackground(new Color(255, 99, 71)); // Hover color
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
            cancelButton.setBackground(new Color(115, 147, 179));
        }
    });

    // Add Cancel button to the frame
    bookframe.add(cancelButton);
// Add Cancel button to the frame
bookframe.add(cancelButton);


    // Add Cancel button to the frame
    bookframe.add(cancelButton);
                    
                    } else {
                        // If no booked flights, display a message using JOptionPane
                        JOptionPane.showMessageDialog(bookframe, "No booked flights found.", "No Bookings", JOptionPane.INFORMATION_MESSAGE);
                        bookframe.dispose();
                    }

                    // Center the frame on the screen
                    bookframe.setLocationRelativeTo(null);

                    // Set the frame visibility to true
                    bookframe.setVisible(true);
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}



	//HOME PAGE
   private void showHomePage() {
    // Main/Home Frame
    homeFrame = new JFrame("Airline Booking System");

    registerButton = new JButton("Register");
    JButton loginButton = new JButton("Login");
    JButton flightsButton = new JButton("Flights");
    JButton bookings = new JButton("Bookings");
    profile = new JButton("Profile");
    profile.setEnabled(false);
    JButton about = new JButton("About Us");
    logout = new JButton("Logout");

    Color customColor = new Color(83,196,255);
    Color customHoverColor = new Color(140,216,255);

    registerButton.setBackground(customColor);
    loginButton.setBackground(customColor);
    flightsButton.setBackground(customColor);
    bookings.setBackground(customColor);
    profile.setBackground(customColor);
    about.setBackground(customColor);
    logout.setBackground(customColor);

    addHoverEffect(registerButton, customHoverColor);
    addHoverEffect(loginButton, customHoverColor);
    addHoverEffect(flightsButton, customHoverColor);
    addHoverEffect(bookings, customHoverColor);
    addHoverEffect(profile, customHoverColor);
    addHoverEffect(about, customHoverColor);
    addHoverEffect(logout, customHoverColor);

    logout.setEnabled(false); // Initially disabled until the user logs in

    JLabel mainTextLabel = new JLabel("Your Experience Starts Here!");

    Font labelFont = new Font("Script MT Bold", Font.BOLD, 50);
    mainTextLabel.setFont(labelFont);

    mainTextLabel.setForeground(Color.BLACK); // title color

    JLabel servicesText = new JLabel("<html><p style='text-align: center; font-size: 18px;'>Explore Our Services!<br/>"
            + "Book your flights with ease and explore amazing destinations with Nigga Airlines. "
            + "Enjoy comfortable travel and exceptional service!</p></html>");
    servicesText.setForeground(Color.BLACK);
    Font servicesFont = new Font("Sitka Heading", Font.BOLD, 11);
    servicesText.setFont(servicesFont);
    servicesText.setForeground(Color.BLACK);

    ImageIcon backgroundImage = new ImageIcon("C:/Users/Ravz/Documents/JCreator LE/MyProjects/projectgroup4/air1.jpg");
    JLabel backgroundLabel = new JLabel(backgroundImage);
    backgroundLabel.setLayout(null);  // Set layout to null for absolute positioning
    backgroundLabel.setBounds(0, 0, backgroundImage.getIconWidth(), backgroundImage.getIconHeight());  // Set the size to match the image size

    homeFrame.setContentPane(backgroundLabel);

    // Set positions for components
    mainTextLabel.setBounds(160, 60, 800, 100);
    servicesText.setBounds(130, 400, 700, 100);
    registerButton.setBounds(140, 150, 100, 25);
    loginButton.setBounds(240, 150, 100, 25);
    flightsButton.setBounds(340, 150, 100, 25);
    bookings.setBounds(440, 150, 100, 25);
    about.setBounds(540, 150, 100, 25);
    profile.setBounds(640, 150, 100, 25);
    logout.setBounds(740, 150, 100, 25);

    homeFrame.setLayout(null);
    homeFrame.setSize(backgroundImage.getIconWidth(), backgroundImage.getIconHeight());  // Set frame size to match the image size
    homeFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    homeFrame.setLocationRelativeTo(null);

    // ADD
    homeFrame.add(loginButton);
    homeFrame.add(registerButton);
    homeFrame.add(flightsButton);
    homeFrame.add(bookings);
    homeFrame.add(profile);
    homeFrame.add(about);
    homeFrame.add(logout);
    homeFrame.add(servicesText);
    homeFrame.add(mainTextLabel);

    homeFrame.setVisible(true);


            // Registration button functions and frame
    registerButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent a) {
            showRegistrationForm();

        }
    });

    // Login button
    loginButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent a) {
            showLoginPage();
        }
    });
		//logout button
        logout.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        int confirmation = JOptionPane.showConfirmDialog(homeFrame,
                "Are you sure you want to log out?", "Confirmation", JOptionPane.YES_NO_OPTION);

        if (confirmation == JOptionPane.YES_OPTION) {
            isLoggedIn = false;
            updateProfileButtonState();
            JOptionPane.showMessageDialog(homeFrame, "Successfully logged out");
        }
    }
});
    	//user
    	profile.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        if (isLoggedIn) {
            showUserProfile();
        } else {
            System.out.println("Profile button clicked: Opening registration form");
            showRegistrationForm();
        }
    }
});
//FLIGHTS BUTTON
        flightsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent a) {
                showFlightsTable();
            }
        });
	//ABOUT BUTTON
        about.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent a) {
        showAboutUsDialog();
    }
});
	//BOOKINGS BUTTON
        bookings.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent a) {
                if (isLoggedIn) {
                    showUserBookings(loggedInUserEmail);
                } else {
                    JOptionPane.showMessageDialog(homeFrame, "Please log in to view bookings.");
                }
            }
        });

       homeFrame.setVisible(true);

    }

    //HOVER
   private void addHoverEffect(JButton button, Color hoverColor) {
    Color originalColor = button.getBackground(); // Store the original color
    button.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseEntered(MouseEvent e) {
            button.setBackground(hoverColor); // Change background color on hover
        }

        @Override
        public void mouseExited(MouseEvent e) {
            button.setBackground(originalColor); // Restore the original background color
        }
    });
}

	//REGISTER
    private void showRegistrationForm() {
        JFrame registrationFrame = new JFrame("Register");
        // Set background color for the frame
         ImageIcon backgroundImage = new ImageIcon("C:/Users/Ravz/Documents/JCreator LE/MyProjects/projectgroup4/weewoo.jpg");

        // Set layout manager for the frame
        registrationFrame.setContentPane(new JLabel(backgroundImage));

        // Set layout manager for the frame
        registrationFrame.setLayout(new BorderLayout());


        // Registration Form Components
        JLabel lastnLabel = new JLabel("Lastname:");
        JLabel firstnLabel = new JLabel("Firstname:");
        JLabel addressLabel = new JLabel("Address:");
        JLabel contactLabel = new JLabel("Contact no:");
        JLabel emailLabel = new JLabel("Email:");
        JLabel passwordLabel = new JLabel("Password:");
        JLabel confirmPasswordLabel = new JLabel("Confirm Pass:");
        JLabel genderLabel = new JLabel("Gender:");
        JLabel ageLabel = new JLabel("Age:");
        JLabel birthdateLabel = new JLabel("Birthdate:");
        profile.setEnabled(false);


        //color of the labels
        lastnLabel.setForeground(Color.BLACK);
    	firstnLabel.setForeground(Color.BLACK);
    	addressLabel.setForeground(Color.BLACK);
    	contactLabel.setForeground(Color.BLACK);
    	emailLabel.setForeground(Color.BLACK);
    	passwordLabel.setForeground(Color.BLACK);
    	confirmPasswordLabel.setForeground(Color.BLACK);
    	genderLabel.setForeground(Color.BLACK);
    	ageLabel.setForeground(Color.BLACK);
    	birthdateLabel.setForeground(Color.BLACK);


        JTextField lastnTextField = new JTextField();
        JTextField firstnTextField = new JTextField();
        JTextField addressTextField = new JTextField();
        JTextField contactTextField = new JTextField();
        JTextField emailTextField = new JTextField();
        JPasswordField passwordField = new JPasswordField();
		JPasswordField confirmPasswordField = new JPasswordField();  // Declare confirmPasswordField outside ActionListener
        JComboBox<String> genderComboBox = new JComboBox<>(new String[]{"Male", "Female", "Other"});
        genderComboBox.setBackground(new Color(83, 196, 255));
        JTextField ageTextField = new JTextField();
        JTextField birthdateTextField = new JTextField();
        JLabel formatLabel = new JLabel("(YY/MM/DD)");
        JButton registerButton = new JButton("Register");
        registerButton.setBackground(new Color(83,196,255)); // Dodger Blue
        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBackground(new Color(115, 147, 179));


        // Set positions for registration form components
        lastnLabel.setBounds(10, 50, 80, 25);
        lastnTextField.setBounds(100, 50, 165, 25);
        firstnLabel.setBounds(10, 80, 80, 25);
        firstnTextField.setBounds(100, 80, 165, 25);
        addressLabel.setBounds(10, 110, 80, 25);
        addressTextField.setBounds(100, 110, 165, 25);
        contactLabel.setBounds(10, 140, 80, 25);
        contactTextField.setBounds(100, 140, 165, 25);
        emailLabel.setBounds(10, 170, 80, 25);
        emailTextField.setBounds(100, 170, 165, 25);
        passwordLabel.setBounds(10, 200, 80, 25);
        passwordField.setBounds(100, 200, 165, 25);
		confirmPasswordLabel.setBounds(10, 230, 80, 25);
		confirmPasswordField.setBounds(100, 230, 165, 25);

        genderLabel.setBounds(10, 260, 80, 25);
        genderComboBox.setBounds(100, 260, 165, 25);

        birthdateLabel.setBounds(10, 290, 80, 25);
        birthdateTextField.setBounds(100, 290, 165, 25);
        formatLabel.setBounds(270, 290, 80, 25);
        ageLabel.setBounds(10, 320, 80, 25);
        ageTextField.setBounds(100, 320, 165, 25);
        registerButton.setBounds(140, 380, 180, 35);
        cancelButton.setBounds(140, 430, 180, 35);


        registrationFrame.setLayout(null);
		registrationFrame.setSize(450, 550);
		registrationFrame.setLocationRelativeTo(null);
        registrationFrame.setVisible(true);

        // Add registration form components to frame
        registrationFrame.add(lastnLabel);
        registrationFrame.add(lastnTextField);
        registrationFrame.add(firstnLabel);
        registrationFrame.add(firstnTextField);
        registrationFrame.add(addressLabel);
        registrationFrame.add(addressTextField);
        registrationFrame.add(contactLabel);
        registrationFrame.add(contactTextField);
        registrationFrame.add(emailLabel);
        registrationFrame.add(emailTextField);
        registrationFrame.add(passwordLabel);
        registrationFrame.add(passwordField);
		registrationFrame.add(confirmPasswordLabel);
		registrationFrame.add(confirmPasswordField);
        registrationFrame.add(genderLabel);
        registrationFrame.add(genderComboBox);
        registrationFrame.add(birthdateLabel);
        registrationFrame.add(birthdateTextField);
        registrationFrame.add(formatLabel);
        registrationFrame.add(ageLabel);
    	registrationFrame.add(ageTextField);
        registrationFrame.add(registerButton);
        registrationFrame.add(cancelButton);

        if (isLoggedIn) {
    	registerButton.setEnabled(false); // Disable the login button

}

        contactTextField.addKeyListener(new KeyAdapter() {
        	public void keyPressed(KeyEvent e) {
        	char c = e.getKeyChar();

        // Check if the entered character is not a digit
        if (!Character.isDigit(c)) {
            e.consume(); // Consume the key event to prevent the character from being entered
            JOptionPane.showMessageDialog(registrationFrame, "Please enter a valid number for contact.");
        }
    }
});
		passwordField.addKeyListener(new KeyAdapter() {
    		public void keyTyped(KeyEvent e) {
        	// Check the length of the entered password
        	if (passwordField.getPassword().length >= 8) {
           	 	e.consume(); // Consume the key event to prevent additional characters from being typed
        }
    }
});

	//confirm password
		confirmPasswordField.addFocusListener(new FocusAdapter() {
    public void focusLost(FocusEvent e) {
        // Get the entered password and confirm password
        String enteredPassword = new String(passwordField.getPassword());
        String enteredConfirmPassword = new String(confirmPasswordField.getPassword());

        // Check if the passwords don't match
        if (!enteredPassword.equals(enteredConfirmPassword)) {
            JOptionPane.showMessageDialog(registrationFrame, "Passwords do not match.");
        } else {
            // Clear the message if passwords match
            JOptionPane.showMessageDialog(registrationFrame, "Password matched."); // Empty message to clear any previous message
        }
    }
});

        registerButton.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent a) {
        // Get the entered values
        String enteredLastName = lastnTextField.getText();
        String enteredFirstName = firstnTextField.getText();
        String enteredAddress = addressTextField.getText();
        String enteredContact = contactTextField.getText();
        String enteredEmail = emailTextField.getText();
   		char[] enteredPassword = passwordField.getPassword();
        char[] enteredConfirmPassword = confirmPasswordField.getPassword();
        String selectedGender = (String) genderComboBox.getSelectedItem();
        String enteredBirthdate = birthdateTextField.getText();
        String enteredAge = ageTextField.getText();

        //contact is used

        if (isContactNumberAlreadyUsed(enteredContact)) {
            JOptionPane.showMessageDialog(registrationFrame, "Contact No. is already in use. Please use a different number.");
            return;
        }

		//email is used
		if (isEmailAlreadyUsed(enteredEmail)) {
            JOptionPane.showMessageDialog(registrationFrame, "Email is already in use. Please use a different email.");
            return;
        }
		//password length
		if (enteredPassword.length < 8) {
            JOptionPane.showMessageDialog(registrationFrame, "Password must be at least 8 characters long.");
            return;
        }

        //paswword confirmation
                String enteredPasswordStr = new String(enteredPassword);
        String enteredConfirmPasswordStr = new String(enteredConfirmPassword);
        if (!enteredPasswordStr.equals(enteredConfirmPasswordStr)) {
            JOptionPane.showMessageDialog(registrationFrame, "Passwords do not match.");
            return;
        }

        // Check if any field is empty
        if (enteredLastName.isEmpty() || enteredFirstName.isEmpty() || enteredAddress.isEmpty() || enteredContact.isEmpty() || enteredEmail.isEmpty() || enteredPassword.length == 0 || selectedGender.isEmpty() || enteredBirthdate.isEmpty()) {
            JOptionPane.showMessageDialog(registrationFrame, "Please fill up all the fields");
            return;
        }

        // Check if email has the format @gmail.com or @yahoo.com
        if (!(enteredEmail.endsWith("@gmail.com") || enteredEmail.endsWith("@yahoo.com"))) {
            JOptionPane.showMessageDialog(registrationFrame, "Please use a valid email.");
            return;
        }


        // Check if age is 18 or above
        try {
            int age = Integer.parseInt(enteredAge);
            if (age < 18) {
                JOptionPane.showMessageDialog(registrationFrame, "You must be 18 or above to register.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(registrationFrame, "Please enter a valid age.");
            return;
        }

        // Perform registration logic
        if (performRegistration(enteredLastName, enteredFirstName, enteredAddress, enteredContact, enteredEmail, new String(enteredPassword), selectedGender, enteredBirthdate, enteredAge)) {
            JOptionPane.showMessageDialog(registrationFrame, "Registration successful!");
            registrationFrame.dispose(); // Close the registration frame
        } else {
            JOptionPane.showMessageDialog(registrationFrame, "Registration failed. Try again.");
        }
    }
});

        cancelButton.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent a) {
        registrationFrame.dispose(); // Close the registration frame on cancel
    }
});


//HOVER EFFECT ON BUTTONS
registerButton.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent evt) {
        registerButton.setBackground(new Color(13,146,118)); // Hover color
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
        registerButton.setBackground(new Color(83,196,255)); // Reset to custom color (Dodger Blue) on exit
    }
});

// Add hover effect for Cancel button
cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent evt) {
        cancelButton.setBackground(new Color(255, 99, 71)); // Hover color
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
        cancelButton.setBackground(new Color(115, 147, 179)); // Reset to custom color (Red-Orange) on exit
    }
});
    }


    //FLIGHTS
     private void showFlightsTable() {
    JFrame flightsFrame = new JFrame("Available Flights");
     // Set background color for the frame
         ImageIcon backgroundImage = new ImageIcon("C:/Users/Ravz/Documents/JCreator LE/MyProjects/projectgroup4/weewoo.jpg");

        // Set layout manager for the frame
        flightsFrame.setContentPane(new JLabel(backgroundImage));

        // Set layout manager for the frame
        flightsFrame.setLayout(new BorderLayout());


    String[] locations = {"Manila", "Cebu", "Batanes", "Bicol", "Pampanga", "Davao", "Palawan", "Iloilo", "Boracay", "Leyte", "Mindoro", "Cagayan de Oro", "Laoag", "Zamboanga", "GenSan", "Surigao", "Siargao", "Tawi-Tawi", "Tacloban", "Virac"};

    JComboBox<String> departureComboBox = new JComboBox<>(locations);
    JComboBox<String> destinationComboBox = new JComboBox<>(locations);


	JLabel fromLabel = new JLabel("From:");
    JLabel toLabel = new JLabel("To:");
    JButton searchButton = new JButton("Search Flights");
    searchButton.setBackground(new Color(83,196,255));

    // Set positions for components
    fromLabel.setBounds(100, 90, 60, 25);
    departureComboBox.setBounds(140, 80, 100, 45);
    departureComboBox.setBackground(new Color(150, 222, 209));
    toLabel.setBounds(275, 90, 50, 25);
    destinationComboBox.setBounds(300, 80, 100, 45);
   	destinationComboBox.setBackground(new Color(255, 246,233));

    searchButton.setBounds(180, 160, 150, 50);

    flightsFrame.setLayout(null);
	flightsFrame.setSize(550, 280);
	flightsFrame.setLocationRelativeTo(null);
    flightsFrame.setVisible(true);

    // Add components to frame

    flightsFrame.add(departureComboBox);
    flightsFrame.add(fromLabel);
    flightsFrame.add(destinationComboBox);
    flightsFrame.add(toLabel);
    flightsFrame.add(searchButton);

    searchButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        if (!isLoggedIn) {
            JOptionPane.showMessageDialog(flightsFrame, "Please log in to search for flights.");
            return;
        }

        String selectedDeparture = (String) departureComboBox.getSelectedItem();
        String selectedDestination = (String) destinationComboBox.getSelectedItem();

        if (selectedDeparture.equals(selectedDestination)) {
            JOptionPane.showMessageDialog(flightsFrame, "Departure and Destination cannot be the same.");
            return;
        }

        // Perform logic to fetch and display flights based on the selected locations
        displayFlights(selectedDeparture, selectedDestination);
    }
});
searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent evt) {
        searchButton.setBackground(new Color(13,146,118)); // Hover color
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
        searchButton.setBackground(new Color(83,196,255)); // Reset to custom color (Dodger Blue) on exit
    }
});
     }

private boolean hasUserBookedFlight(String userEmail) {
    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String password = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String selectQuery = "SELECT COUNT(*) FROM bookings WHERE user_email = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                preparedStatement.setString(1, userEmail);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        int bookedFlightsCount = resultSet.getInt(1);
                        return bookedFlightsCount > 1;
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    return false;
}

//ABOUT
private void showAboutUsDialog() {
        // Create a frame for About Us information
        JFrame aboutUsFrame = new JFrame("About Us");

        // Set background color for the frame
         ImageIcon backgroundImage = new ImageIcon("C:/Users/Ravz/Documents/JCreator LE/MyProjects/projectgroup4/weewoo.jpg");

        // Set layout manager for the frame
        aboutUsFrame.setContentPane(new JLabel(backgroundImage));

        // Set layout manager for the frame
        aboutUsFrame.setLayout(new BorderLayout());

        // Create a JLabel with the provided HTML content
        String htmlContent = "<html><body style='font-size: 15pt; text-align: center;'>"
                + "<p>Welcome to Nigga Airlines, where we take pride in connecting people with unforgettable experiences. "
                + "Our team is dedicated to providing seamless and enjoyable journeys, ensuring every passenger feels valued and cherished. "
                + "Embrace the freedom of the skies with Nigga Airlines, where we're committed to making your travel moments truly special.</p>"
                + "</body></html>";
        JLabel label = new JLabel(htmlContent);
        label.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20)); // Add some padding

        // Add the JLabel to the frame
        aboutUsFrame.add(label, BorderLayout.CENTER);

        // Set the frame size and make it visible
        aboutUsFrame.setSize(600, 400);
        aboutUsFrame.setLocationRelativeTo(null);
        aboutUsFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Close only the About Us frame
        aboutUsFrame.setVisible(true);
    }

//displayed FLights
private void displayFlights(String departure, String destination) {
    JFrame flightsInfoFrame = new JFrame("Selected Flights");
   	flightsInfoFrame.getContentPane().setBackground(new Color(140,216,255));

    String[] columnNames = {"Flight ID", "Departure", "Destination", "Date", "Cost"};

    // Fetch flights from the database based on departure and destination
    List<String[]> flightData = fetchFlightsFromDatabase(departure, destination);

    Object[][] data = new Object[flightData.size()][5];
    for (int i = 0; i < flightData.size(); i++) {
        data[i] = flightData.get(i);
    }

    JTable flightsTable = new JTable(data, columnNames);
    JScrollPane scrollPane = new JScrollPane(flightsTable);

    JButton proceedButton = new JButton("Proceed");
    proceedButton.setBackground(new Color(83,196,255));

    JButton cancelflightButton = new JButton("Cancel");
    cancelflightButton.setBackground(new Color(115, 147, 179));


    flightsInfoFrame.setLayout(null);
    scrollPane.setBounds(10, 10, 500, 300);
    proceedButton.setBounds(180, 320, 100, 25);
    cancelflightButton.setBounds(290, 320, 100, 25);

    flightsInfoFrame.add(scrollPane);
    flightsInfoFrame.add(proceedButton);
    flightsInfoFrame.add(cancelflightButton);

    flightsInfoFrame.setSize(600, 400);
	flightsInfoFrame.setLocationRelativeTo(null); // Center the frame on the screen
	flightsInfoFrame.setVisible(true);

    cancelflightButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            flightsInfoFrame.dispose(); // Close the current frame (Selected Flights)
        }
    });
    proceedButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        int selectedRow = flightsTable.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(flightsInfoFrame, "Please select a flight to proceed.");
            return;
        }

        String flightId = (String) flightsTable.getValueAt(selectedRow, 0);
        String departure = (String) flightsTable.getValueAt(selectedRow, 1);
        String destination = (String) flightsTable.getValueAt(selectedRow, 2);
        String date = (String) flightsTable.getValueAt(selectedRow, 3);
        String cost = (String) flightsTable.getValueAt(selectedRow, 4);

        if (userHasBooking(loggedInUserEmail, flightId, departure, destination, date, cost)) {
            JOptionPane.showMessageDialog(flightsInfoFrame, "Booking successful!");
            flightsInfoFrame.dispose(); // Close the current frame (Selected Flights)
        } else {
            JOptionPane.showMessageDialog(flightsInfoFrame, "Booking failed. Try again.");
        }
    }
});
 proceedButton.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent evt) {
        proceedButton.setBackground(new Color(13,146,118)); // Hover color
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
         proceedButton.setBackground(new Color(83,196,255)); // Reset to custom color (Dodger Blue) on exit
    }
});

// Add hover effect for Cancel button
cancelflightButton.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent evt) {
        cancelflightButton.setBackground(new Color(255, 99, 71)); // Hover color
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
       cancelflightButton.setBackground(new Color(115, 147, 179)); // Reset to custom color (Red-Orange) on exit
    }
});

}


// Helper method to check if the user already has a booking
private boolean userHasBooking(String userEmail, String flightId, String departure, String destination, String date, String cost) {
    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String password = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String insertQuery = "INSERT INTO bookings (user_email, flight_id, departure_location, destination_location, flight_date, cost) VALUES (?, ?, ?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(insertQuery)) {
                preparedStatement.setString(1, userEmail);
                preparedStatement.setString(2, flightId);
                preparedStatement.setString(3, departure);
                preparedStatement.setString(4, destination);
                preparedStatement.setString(5, date);
                preparedStatement.setString(6, cost);

                int rowsAffected = preparedStatement.executeUpdate();

                return rowsAffected > 0;
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        return false;
    }
}

//booking the flight
private void bookFlight(String flightId, String departure, String destination, String date, String cost) {
    try {

        storeBookingInDatabase(loggedInUserEmail, flightId, departure, destination, date, cost);

        // Display a confirmation message
        JOptionPane.showMessageDialog(null, "Booking flight: " + flightId + "\nDeparture: " + departure
                + "\nDestination: " + destination + "\nDate: " + date + "\nCost: " + cost);
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error booking flight. Please try again.");
    }
}


//flight database
private List<String[]> fetchFlightsFromDatabase(String departure, String destination) {
    List<String[]> flightData = new ArrayList<>();

    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String password = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String selectQuery = "SELECT * FROM flights WHERE departure_location=? AND destination_location=?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                preparedStatement.setString(1, departure);
                preparedStatement.setString(2, destination);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    while (resultSet.next()) {
                        String flightId = "FI-" + resultSet.getInt("flight_id");
                        String flightDeparture = resultSet.getString("departure_location");
                        String flightDestination = resultSet.getString("destination_location");
                        String flightDate = resultSet.getString("flight_date");
                        String flightCost = resultSet.getString("cost");

                        String[] flightInfo = {flightId, flightDeparture, flightDestination, flightDate, flightCost};
                        flightData.add(flightInfo);
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    return flightData;
}
    private void updateProfileButtonState() {
    profile.setEnabled(isLoggedIn); //profile
    logout.setEnabled(isLoggedIn); //logout
    if(isLoggedIn){
    	registerButton.setEnabled(false);
    }else{
    	registerButton.setEnabled(true);
    }

}

 //Login codes
    private void showLoginPage() {
        JFrame loginFrame = new JFrame("Login");
        // Set background color for the frame
         ImageIcon backgroundImage = new ImageIcon("C:/Users/Ravz/Documents/JCreator LE/MyProjects/projectgroup4/weewoo.jpg");

        // Set layout manager for the frame
        loginFrame.setContentPane(new JLabel(backgroundImage));

        // Set layout manager for the frame
        loginFrame.setLayout(new BorderLayout());

        ImageIcon originalLogo = new ImageIcon("C:/Users/Ravz/Documents/JCreator LE/MyProjects/projectgroup4/login.png");

        // Define the desired dimensions
        int scaledWidth = 150;
        int scaledHeight = 150;

        // Get the Image from the ImageIcon
        Image originalImage = originalLogo.getImage();

        // Create a buffered image to work with
        BufferedImage bufferedImage = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_ARGB);

        // Get the graphics context of the buffered image
        bufferedImage.createGraphics().drawImage(originalImage, 0, 0, scaledWidth, scaledHeight, null);

        // Create a new ImageIcon with the scaled image
        ImageIcon scaledLogo = new ImageIcon(bufferedImage);

        // Create a JLabel to display the scaled logo
        JLabel logoLabel = new JLabel(scaledLogo);

        // Login Form Components
        JLabel emailLabel = new JLabel("Email:");
        JLabel passwordLabel = new JLabel("Password:");
        JTextField emailTextField = new JTextField();
        JPasswordField passwordField = new JPasswordField();
        JButton loginButton = new JButton("Login");
        JButton cancelloginButton = new JButton("Cancel");


        // Set positions for login form components
        logoLabel.setBounds(215, 17, 150, 150);
        emailLabel.setBounds(190, 180, 80, 25);
        emailTextField.setBounds(230, 180, 165, 25);
        passwordLabel.setBounds(163, 230, 80, 25);
        passwordField.setBounds(230, 230, 165, 25);
        loginButton.setBounds(200, 280, 180, 35);
        loginButton.setBackground(new Color(83,196,255));
        cancelloginButton.setBounds(200, 330, 180, 35);
        cancelloginButton.setBackground(new Color(115, 147, 179));



        loginFrame.setLayout(null);
		loginFrame.setSize(575, 440);
		loginFrame.setLocationRelativeTo(null);
        loginFrame.setVisible(true);

        // Add login form components to frame
        loginFrame.add(logoLabel);
        loginFrame.add(emailLabel);
        loginFrame.add(emailTextField);
        loginFrame.add(passwordLabel);
        loginFrame.add(passwordField);
        loginFrame.add(loginButton);
        loginFrame.add(cancelloginButton);


        if (isLoggedIn) {
    	loginButton.setEnabled(false); // Disable the login button

}

// Add action listener for login button
loginButton.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent a) {
        // Check if the user is already logged in
        if (isLoggedIn) {
            JOptionPane.showMessageDialog(loginFrame, "You are already logged in!");
            return; // Exit the actionPerformed method to prevent further execution
        }

        // Get the entered values
        String enteredEmail = emailTextField.getText();
        char[] enteredPassword = passwordField.getPassword();

        // Check if any field is empty
        if (enteredEmail.isEmpty() || enteredPassword.length == 0) {
            JOptionPane.showMessageDialog(loginFrame, "Please fill up all the fields");
            return; // Exit the actionPerformed method to prevent further execution
        }

        // Perform login logic
        if (performLogin(enteredEmail, new String(enteredPassword))) {
            JOptionPane.showMessageDialog(loginFrame, "Login successful!");
            isLoggedIn = true;
            loginButton.setEnabled(false); // Disable the login button after successful login
            loginFrame.dispose(); // Close the login frame or navigate to the next screen
            updateProfileButtonState();
        } else {
            JOptionPane.showMessageDialog(loginFrame, "Login failed. Please check your email or password.");
        }
    }
});
        cancelloginButton.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent a) {
        loginFrame.dispose(); // Close the login frame on cancel
    }
});
loginButton.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent evt) {
        loginButton.setBackground(new Color(13,146,118)); // Hover color
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
        loginButton.setBackground(new Color(83,196,255)); // Reset to custom color (Dodger Blue) on exit
    }
});

// Add hover effect for Cancel button
cancelloginButton.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent evt) {
        cancelloginButton.setBackground(new Color(255, 99, 71)); // Hover color
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
        cancelloginButton.setBackground(new Color(115, 147, 179)); // Reset to custom color (Red-Orange) on exit
    }
});
    }

    private void storeBookingInDatabase(String userEmail, String flightId, String departure, String destination, String date, String cost) {
    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String password = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String insertQuery = "INSERT INTO bookings(user_email, flight_id, departure_location, destination_location, flight_date, cost) VALUES (?, ?, ?, ?, ?, ?)";
            try (PreparedStatement preparedStatement = connection.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS)) {
                preparedStatement.setString(1, userEmail);
                preparedStatement.setString(2, flightId);
                preparedStatement.setString(3, departure);
                preparedStatement.setString(4, destination);
                preparedStatement.setString(5, date);
                preparedStatement.setString(6, cost);

                int affectedRows = preparedStatement.executeUpdate();

                if (affectedRows > 0) {
                    // Retrieve the generated booking_id
                    try (ResultSet generatedKeys = preparedStatement.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            int bookingId = generatedKeys.getInt(1);
                            System.out.println("Booking successfully stored with booking_id: " + bookingId);
                        } else {
                            System.err.println("Failed to retrieve the generated booking_id.");
                        }
                    }
                } else {
                    System.err.println("Failed to store booking in the database.");
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

//PROFILE
private void showUserProfile() {
    try {
        if (loggedInUserEmail.isEmpty()) {
            System.out.println("Email of the logged-in user is empty.");
            JOptionPane.showMessageDialog(homeFrame, "Failed to retrieve user information. Please log in first.");
            return;
        }

        String url = "jdbc:mysql://localhost:3306/mydb";
        String[] userInfo = getUserInfo(loggedInUserEmail);

        if (userInfo != null) {
            StringBuilder userProfile = new StringBuilder();
            userProfile.append("Lastname: ").append(userInfo[0]).append("\n");
            userProfile.append("Firstname: ").append(userInfo[1]).append("\n");
            userProfile.append("Address: ").append(userInfo[2]).append("\n");
            userProfile.append("Contact: ").append(userInfo[3]).append("\n");
            userProfile.append("Email: ").append(userInfo[4]).append("\n");
            userProfile.append("Gender: ").append(userInfo[6]).append("\n");
            userProfile.append("Birthdate: ").append(userInfo[7]).append("\n");
            userProfile.append("Age: ").append(userInfo[8]).append("\n");

            int option = JOptionPane.showConfirmDialog(homeFrame, userProfile.toString() + "\nDo you want to edit your profile?", "User Profile", JOptionPane.YES_NO_OPTION);

            if (option == JOptionPane.YES_OPTION) {
                // User chose to edit the profile
                editUserProfile(userInfo);
            }
        } else {
            JOptionPane.showMessageDialog(homeFrame, "Failed to retrieve user information for email: " + loggedInUserEmail);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

private void editUserProfile(String[] userInfo) {
    JFrame editProfileFrame = new JFrame("Edit Profile");
    editProfileFrame.getContentPane().setBackground(new Color(140,216,255));

    // Create editable form components

    JLabel lastnLabel = new JLabel("Lastname:");
    JLabel firstnLabel = new JLabel("Firstname:");
    JLabel addressLabel = new JLabel("Address:");
    JLabel contactLabel = new JLabel("Contact no:");
    JLabel emailLabel = new JLabel("Email:");
    JLabel genderLabel = new JLabel("Gender:");
    JLabel ageLabel = new JLabel("Age:");
    JLabel birthdateLabel = new JLabel("Birthdate:");

    JTextField lastNameField = new JTextField(userInfo[0]);
    JTextField firstNameField = new JTextField(userInfo[1]);
    JTextField addressField = new JTextField(userInfo[2]);
    JTextField contactField = new JTextField(userInfo[3]);
    JTextField emailField = new JTextField(userInfo[4]);
    JComboBox<String> genderComboBox = new JComboBox<>(new String[]{"Male", "Female", "Other"});
    genderComboBox.setSelectedItem(userInfo[6]);
    JTextField birthdateField = new JTextField(userInfo[7]);
    JTextField ageField = new JTextField(userInfo[8]);

    JButton saveButton = new JButton("Save");
    saveButton.setBackground(new Color(83,196,255));
    JButton deleteAccountButton = new JButton("Delete Account");
    deleteAccountButton.setBackground(new Color(115, 147, 179));


    // Adjust positions as needed
    lastnLabel.setBounds(100, 50, 165, 25);
    firstnLabel.setBounds(100, 80, 165, 25);
    addressLabel.setBounds(100, 110, 165, 25);
    contactLabel.setBounds(100,140, 165, 25);
    emailLabel.setBounds(100,170, 165, 25);
    genderLabel.setBounds(100,200, 165, 25);
   	ageLabel.setBounds(100, 260, 165, 25);
    birthdateLabel.setBounds(100, 230, 165, 25);
    lastNameField.setBounds(180, 50, 165, 25);
    firstNameField.setBounds(180, 80, 165, 25);
    addressField.setBounds(180, 110, 165, 25);
    contactField.setBounds(180, 140, 165, 25);
    emailField.setBounds(180, 170, 165, 25);
    genderComboBox.setBounds(180, 200, 165, 25);
    birthdateField.setBounds(180, 230, 165, 25);
    ageField.setBounds(180, 260, 165, 25);
    saveButton.setBounds(200, 300, 80, 45);
    deleteAccountButton.setBounds(310, 300, 120, 45);



    // Add editable form components to frame
    editProfileFrame.add(lastnLabel);
    editProfileFrame.add(firstnLabel);
    editProfileFrame.add(addressLabel);
    editProfileFrame.add(contactLabel);
    editProfileFrame.add(emailLabel);
    editProfileFrame.add(genderLabel);
    editProfileFrame.add(ageLabel);
    editProfileFrame.add(birthdateLabel);
    editProfileFrame.add(lastNameField);
    editProfileFrame.add(firstNameField);
    editProfileFrame.add(addressField);
    editProfileFrame.add(contactField);
    editProfileFrame.add(emailField);
    editProfileFrame.add(genderComboBox);
    editProfileFrame.add(birthdateField);
    editProfileFrame.add(ageField);
    editProfileFrame.add(saveButton);
    editProfileFrame.add(deleteAccountButton);

    // Set layout and visibility for the frame
    editProfileFrame.setLayout(null);
    editProfileFrame.setSize(600, 400);
    editProfileFrame.setLocationRelativeTo(null);
    editProfileFrame.setVisible(true);

    saveButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent a) {
            // Get the updated values
            String updatedLastName = lastNameField.getText();
            String updatedFirstName = firstNameField.getText();
            String updatedAddress = addressField.getText();
            String updatedContact = contactField.getText();
            String updatedEmail = emailField.getText();
            String updatedGender = (String) genderComboBox.getSelectedItem();
            String updatedBirthdate = birthdateField.getText();
            String updatedAge = ageField.getText();

            // Perform update logic
            if (performProfileUpdate(updatedLastName, updatedFirstName, updatedAddress, updatedContact, updatedEmail, updatedGender, updatedBirthdate, updatedAge)) {
                JOptionPane.showMessageDialog(editProfileFrame, "Profile updated successfully!");
                editProfileFrame.dispose(); // Close the edit profile frame
            } else {
                JOptionPane.showMessageDialog(editProfileFrame, "Profile update failed. Try again.");
            }
        }
    });

    deleteAccountButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            int deleteConfirmation = JOptionPane.showConfirmDialog(editProfileFrame, "Are you sure you want to delete your account?", "Delete Account", JOptionPane.YES_NO_OPTION);

            if (deleteConfirmation == JOptionPane.YES_OPTION) {
                if (deleteUserAccount(loggedInUserEmail)) {
                    JOptionPane.showMessageDialog(editProfileFrame, "Account deleted successfully.");
                    editProfileFrame.dispose(); // Close the edit profile frame
                    // Additional actions after account deletion can be added here
                } else {
                    JOptionPane.showMessageDialog(editProfileFrame, "Failed to delete account. Please try again.");
                }
            }
        }
    });

    saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent evt) {
        saveButton.setBackground(new Color(70, 130, 180)); // Hover color
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
        saveButton.setBackground(new Color(83,196,255)); // Reset to custom color (Dodger Blue) on exit
    }
});

// Add hover effect for Cancel button
 deleteAccountButton.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseEntered(java.awt.event.MouseEvent evt) {
         deleteAccountButton.setBackground(new Color(255, 99, 71)); // Hover color
    }

    public void mouseExited(java.awt.event.MouseEvent evt) {
         deleteAccountButton.setBackground(new Color(115, 147, 179)); // Reset to custom color (Red-Orange) on exit
    }
});
}

//SAVE USER
private boolean performProfileUpdate(String lastName, String firstName, String address, String contact, String email, String gender, String birthdate, String age) {
    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String dbPassword = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, dbPassword)) {
            String updateQuery = "UPDATE users SET lastname=?, firstname=?, address=?, contact=?, gender=?, birthdate=?, age=? WHERE email=?";

            try (PreparedStatement preparedStatement = connection.prepareStatement(updateQuery)) {
                preparedStatement.setString(1, lastName);
                preparedStatement.setString(2, firstName);
                preparedStatement.setString(3, address);
                preparedStatement.setString(4, contact);
                preparedStatement.setString(5, gender);
                preparedStatement.setString(6, birthdate);
                preparedStatement.setString(7, age);
                preparedStatement.setString(8, email);

                int rowsAffected = preparedStatement.executeUpdate();

                return rowsAffected > 0; // If rowsAffected is greater than 0, update was successful
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    return false; // Update failed
}

//DELETE USER
private boolean deleteUserAccount(String email) {
    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String dbPassword = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, dbPassword)) {
            String deleteQuery = "DELETE FROM users WHERE email=?";

            try (PreparedStatement preparedStatement = connection.prepareStatement(deleteQuery)) {
                preparedStatement.setString(1, email);

                int rowsAffected = preparedStatement.executeUpdate();

                if (rowsAffected > 0) {
                    // Deletion was successful, so log out the user
                    isLoggedIn = false;
                    updateProfileButtonState(); // Update the state of the profile button
                }

                return rowsAffected > 0; // If rowsAffected is greater than 0, deletion was successful
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    return false; // Deletion failed
}



private String[] getUserInfo(String email) {
    String[] userInfo = new String[9];

    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String password = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String selectQuery = "SELECT * FROM users WHERE email=?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                preparedStatement.setString(1, email);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        // Retrieve user information
                        userInfo[0] = resultSet.getString("lastname");
                        userInfo[1] = resultSet.getString("firstname");
                        userInfo[2] = resultSet.getString("address");
                        userInfo[3] = resultSet.getString("contact");
                        userInfo[4] = resultSet.getString("email");
                        userInfo[6] = resultSet.getString("gender");
                        userInfo[7] = resultSet.getString("birthdate");
                        userInfo[8] = resultSet.getString("age");
                    } else {
                        System.out.println("User not found for email: " + email);
                        return null; // Return null if the user is not found
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    return userInfo;
}

     // ImagePanel class for setting the background image
    class ImagePanel extends JPanel {
        private Image backgroundImage;

        public ImagePanel(String imagePath) {
            backgroundImage = new ImageIcon(imagePath).getImage();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
        }
    }

   private boolean cancelBooking(int bookingId) {  //cancel bookings
    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String password = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String deleteQuery = "DELETE FROM bookings WHERE booking_id = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(deleteQuery)) {
                preparedStatement.setInt(1, bookingId);

                int rowsAffected = preparedStatement.executeUpdate();

                return rowsAffected > 0;
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        return false;
    }
}

   private boolean performLogin(String enteredEmail, String enteredPassword) {
    try {
        String url = "jdbc:mysql://localhost:3306/mydb"; // Replace with your actual database name
        String username = "root"; // Replace with your actual MySQL username
        String password = ""; // Replace with your actual MySQL password

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String selectQuery = "SELECT * FROM users WHERE email=? AND password=?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                preparedStatement.setString(1, enteredEmail);
                preparedStatement.setString(2, enteredPassword);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    // If a matching user is found, the login is successful
                    if (resultSet.next()) {
                        // Set loggedInUserEmail with the user's email
                        loggedInUserEmail = resultSet.getString("email");
                        return true;
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace(); // Print the exception details for debugging
    }

    return false;
}


     private boolean performRegistration(String lastName, String firstName, String address, String contact, String email, String password, String gender, String birthdate, String age) {
    try {
        // Check if the email is already used
        if (isEmailAlreadyUsed(email)) {
            return false; // Registration failed if email is already in use
        }
         if (isContactNumberAlreadyUsed(contact)) {
            return false; // Registration failed if contact number is already in use
        }


        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String dbPassword = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, dbPassword)) {
            String insertQuery = "INSERT INTO users (lastname, firstname, address, contact, email, password, gender, birthdate, age) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

            try (PreparedStatement preparedStatement = connection.prepareStatement(insertQuery)) {
                preparedStatement.setString(1, lastName);
                preparedStatement.setString(2, firstName);
                preparedStatement.setString(3, address);
                preparedStatement.setString(4, contact);
                preparedStatement.setString(5, email);
                preparedStatement.setString(6, password);
                preparedStatement.setString(7, gender);
                preparedStatement.setString(8, birthdate);
                preparedStatement.setString(9, age);

                int rowsAffected = preparedStatement.executeUpdate();

                return rowsAffected > 0; // If rowsAffected is greater than 0, registration was successful
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    return false; // Registration failed
}
private boolean isContactNumberAlreadyUsed(String contact) {
    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String dbPassword = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, dbPassword)) {
            String selectQuery = "SELECT COUNT(*) FROM users WHERE contact = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                preparedStatement.setString(1, contact);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        int count = resultSet.getInt(1);
                        return count > 0; // If count is greater than 0, contact number is already used
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    return false; // Assume contact number is not used (registration can proceed)
}

private boolean isEmailAlreadyUsed(String email) {
    try {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String username = "root";
        String dbPassword = "";

        Class.forName("com.mysql.cj.jdbc.Driver");

        try (Connection connection = DriverManager.getConnection(url, username, dbPassword)) {
            String selectQuery = "SELECT COUNT(*) FROM users WHERE email = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                preparedStatement.setString(1, email);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        int count = resultSet.getInt(1);
                        return count > 0; // If count is greater than 0, email is already used
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    return false; // Assume email is not used (registration can proceed)
}
}
